{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1575304165375},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1575304165375},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1575304165376},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1575304165376},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1575304165376},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1575304165386},{"_id":"source/_posts/Sentry-前端异常上报源码分析.md","hash":"4daaaa6801d8d269b114cc689a9c1f1da7143aba","modified":1575305785346},{"_id":"source/_posts/Sentry-入门攻略.md","hash":"57e608e85f0cc1b294321ad8fd120a8f72e2cf77","modified":1575305689231},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1575304165376},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1575304165376},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1575304165377},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1575304165377},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1575304165377},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1575304165377},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1575304165377},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1575304165378},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1575304165378},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1575304165378},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1575304165378},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1575304165378},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1575304165384},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1575304165384},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1575304165385},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1575304165385},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1575304165386},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1575304165385},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1575304165385},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1575304165385},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1575304165379},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1575304165379},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1575304165379},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1575304165379},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1575304165380},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1575304165380},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1575304165380},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1575304165381},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1575304165381},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1575304165381},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1575304165383},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1575304165383},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1575304165383},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1575304165383},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1575304165383},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1575304165384},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1575304165386},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1575304165392},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1575304165410},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1575304165410},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1575304165411},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1575304165411},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1575304165411},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1575304165412},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1575304165412},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1575304165413},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1575304165415},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1575304165414},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1575304165414},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1575304165381},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1575304165382},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1575304165382},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1575304165382},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1575304165382},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1575304165383},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1575304165387},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1575304165387},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1575304165388},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1575304165388},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1575304165389},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1575304165390},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1575304165391},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1575304165389},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1575304165392},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1575304165390},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1575304165392},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1575304165397},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1575304165396},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1575304165391},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1575304165403},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1575304165412},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1575304165412},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1575304165413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1575304165413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1575304165413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1575304165413},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1575304165401},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1575304165409},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1575304165399},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1575306256904},{"_id":"themes/apollo/README.md","hash":"8ce63966d1c7429121920c164c8613507ce30126","modified":1575306256905},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1575306256905},{"_id":"themes/apollo/_config.yml","hash":"261de70c54a5b6bac83afc8e1a77bbd715fae547","modified":1575306256905},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1575306256906},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1575306256909},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1575306256894},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1575306256897},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1575306242615},{"_id":"themes/apollo/.git/index","hash":"c7208571d688d3c98536958dced2e32eab6c25f3","modified":1575306256916},{"_id":"themes/apollo/.git/packed-refs","hash":"e8f4e51aae7eb425ca993521e350f13a44684e27","modified":1575306256891},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1575306256905},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1575306256906},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1575306256906},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1575306256906},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1575306256906},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1575306256907},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1575306256908},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1575306256910},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1575306242617},{"_id":"themes/apollo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1575306242617},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1575306242615},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1575306242618},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1575306242616},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1575306242619},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1575306242616},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1575306242619},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1575306242618},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1575306242620},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1575306242615},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1575306242618},{"_id":"themes/apollo/.git/logs/HEAD","hash":"5e3b6b82b8ac4d31b3414abdcdc18644db35366e","modified":1575306256895},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1575306256907},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1575306256907},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1575306256907},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1575306256907},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1575306256908},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1575306256908},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1575306256909},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1575306256908},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1575306256908},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1575306256912},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1575306256910},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1575306256915},{"_id":"themes/apollo/.git/refs/heads/master","hash":"66cd499048bb66d272f803d69453b912aecd9b8c","modified":1575306256895},{"_id":"themes/apollo/.git/objects/pack/pack-7e190d77267e39e4487331a563a93f70cda2584a.idx","hash":"e0a3f929ec55ad453bfa30fd05ba360f038ccf2a","modified":1575306256876},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1575306256912},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1575306256912},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1575306256913},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1575306256914},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1575306256914},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1575306256914},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1575306256914},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1575306256914},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1575306256915},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"5e3b6b82b8ac4d31b3414abdcdc18644db35366e","modified":1575306256896},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1575306256893},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"5e3b6b82b8ac4d31b3414abdcdc18644db35366e","modified":1575306256893},{"_id":"themes/apollo/.git/objects/pack/pack-7e190d77267e39e4487331a563a93f70cda2584a.pack","hash":"afb1b0c732f265ad93383e453ae473c25856fd8b","modified":1575306256874}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Sentry 前端异常上报源码分析","date":"2019-12-02T16:55:52.000Z","_content":"\n这节我们主要对 Sentry 核心概念的基本原理进行分析，主要有几点：\n\n- 收集错误信息\n- 面包屑如何工作\n\n<!-- more -->\n\n## 收集错误信息\n\n我们在前端收集错误，肯定离不开 [window.onerror](https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror) 这个 API，Sentry 之所以能够自动收集错误信息，主要也是基于这个 API 来做的。\n\n首先通过 `installGlobalHandler` 这个函数对原生的 `onerror` 进行了重写：\n\n```ts\nthis._global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnErrorHandler) {\n          return self._oldOnErrorHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteOnError(msg, url, line, column)\n        : self._enhanceEventWithInitialFrame(\n            eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: false,\n            }),\n            url,\n            line,\n            column,\n          );\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnErrorHandler) {\n        return self._oldOnErrorHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n```\n\n当然仅仅依赖于 `window.onerror` 还不够，比如说 `Promise` 里的 `reject`, 当没有 reject 处理器的时候，则会触发 [unhandledrejection](https://developer.mozilla.org/zh-CN/docs/Web/Events/unhandledrejection) 事件，因此需要用到这个 API，Sentry 也对其进行了重写：\n\n```js\nthis._global.onunhandledrejection = function(e: any): boolean {\n      let error = e;\n      try {\n        error = e && 'reason' in e ? e.reason : e;\n      } catch (_oO) {\n        // no-empty\n      }\n\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnUnhandledRejectionHandler) {\n          return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteRejection(error)\n        : eventFromUnknownInput(error, undefined, {\n            attachStacktrace: client && client.getOptions().attachStacktrace,\n            rejection: true,\n          });\n\n      event.level = Severity.Error;\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onunhandledrejection',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnUnhandledRejectionHandler) {\n        return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n```\n\n`installGlobalHandler.ts` 还在事件的 exception 上添加 stacktrace 属性，来存放收集到的堆栈跟踪记录：\n\n```ts\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n```\n\n## Breadcrumbs 的实现\n\n我们知道 Sentry 的面包屑功能，是用来收集 Issue 发生时的相关信息。通过 SDK 对某些事件的拦截，并时刻进行监听。只要在拦截范围内拦截到用户的操作，Sentry 都会为其生成一个面包屑记录，并通过实现的一个队列结构来存放这些记录；当错误发生时，这些信息会作为参数的一部分上传报告到 Sentry 后台。\n\n通过查看 `breadcrumbs.ts` 源码，发现它主要是对 `DOM`, `EventListener`, `fetch`, `console`, `history`, `xhr` 几处进行了拦截处理。所有拦截事件会通过 [instrument](https://github.com/getsentry/sentry-javascript/blob/4905a844cef67fbd0347ee6e6f0da584f013a091/packages/browser/src/instrument.ts#L331)来进行添加，\n\n来看看 `Dom` 相关的具体实现：\n\n```ts\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    /* 访问 event.target，并通过 htmlTreeAsString 递归获取父节点，获取到类似 body > div#app > \n      img[alt=\"Vue logo\"] 之类的路径\n     */\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event,\n        name: handlerData.name,\n      },\n    );\n  }\n```\n\n关于面包屑所有的拦截事件，都会根据构造函数的 options 来确定是否启用：\n\n```ts\n  public constructor(options?: BreadcrumbIntegrations) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n```","source":"_posts/Sentry-前端异常上报源码分析.md","raw":"---\ntitle: Sentry 前端异常上报源码分析\ndate: 2019-12-03 00:55:52\ntags: sentry\n---\n\n这节我们主要对 Sentry 核心概念的基本原理进行分析，主要有几点：\n\n- 收集错误信息\n- 面包屑如何工作\n\n<!-- more -->\n\n## 收集错误信息\n\n我们在前端收集错误，肯定离不开 [window.onerror](https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror) 这个 API，Sentry 之所以能够自动收集错误信息，主要也是基于这个 API 来做的。\n\n首先通过 `installGlobalHandler` 这个函数对原生的 `onerror` 进行了重写：\n\n```ts\nthis._global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnErrorHandler) {\n          return self._oldOnErrorHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteOnError(msg, url, line, column)\n        : self._enhanceEventWithInitialFrame(\n            eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: false,\n            }),\n            url,\n            line,\n            column,\n          );\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnErrorHandler) {\n        return self._oldOnErrorHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n```\n\n当然仅仅依赖于 `window.onerror` 还不够，比如说 `Promise` 里的 `reject`, 当没有 reject 处理器的时候，则会触发 [unhandledrejection](https://developer.mozilla.org/zh-CN/docs/Web/Events/unhandledrejection) 事件，因此需要用到这个 API，Sentry 也对其进行了重写：\n\n```js\nthis._global.onunhandledrejection = function(e: any): boolean {\n      let error = e;\n      try {\n        error = e && 'reason' in e ? e.reason : e;\n      } catch (_oO) {\n        // no-empty\n      }\n\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnUnhandledRejectionHandler) {\n          return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteRejection(error)\n        : eventFromUnknownInput(error, undefined, {\n            attachStacktrace: client && client.getOptions().attachStacktrace,\n            rejection: true,\n          });\n\n      event.level = Severity.Error;\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onunhandledrejection',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnUnhandledRejectionHandler) {\n        return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n```\n\n`installGlobalHandler.ts` 还在事件的 exception 上添加 stacktrace 属性，来存放收集到的堆栈跟踪记录：\n\n```ts\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n```\n\n## Breadcrumbs 的实现\n\n我们知道 Sentry 的面包屑功能，是用来收集 Issue 发生时的相关信息。通过 SDK 对某些事件的拦截，并时刻进行监听。只要在拦截范围内拦截到用户的操作，Sentry 都会为其生成一个面包屑记录，并通过实现的一个队列结构来存放这些记录；当错误发生时，这些信息会作为参数的一部分上传报告到 Sentry 后台。\n\n通过查看 `breadcrumbs.ts` 源码，发现它主要是对 `DOM`, `EventListener`, `fetch`, `console`, `history`, `xhr` 几处进行了拦截处理。所有拦截事件会通过 [instrument](https://github.com/getsentry/sentry-javascript/blob/4905a844cef67fbd0347ee6e6f0da584f013a091/packages/browser/src/instrument.ts#L331)来进行添加，\n\n来看看 `Dom` 相关的具体实现：\n\n```ts\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    /* 访问 event.target，并通过 htmlTreeAsString 递归获取父节点，获取到类似 body > div#app > \n      img[alt=\"Vue logo\"] 之类的路径\n     */\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event,\n        name: handlerData.name,\n      },\n    );\n  }\n```\n\n关于面包屑所有的拦截事件，都会根据构造函数的 options 来确定是否启用：\n\n```ts\n  public constructor(options?: BreadcrumbIntegrations) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n```","slug":"Sentry-前端异常上报源码分析","published":1,"updated":"2019-12-02T16:56:25.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ooedrh0000awcb2aqd25vl","content":"<p>这节我们主要对 Sentry 核心概念的基本原理进行分析，主要有几点：</p>\n<ul>\n<li>收集错误信息</li>\n<li>面包屑如何工作</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"收集错误信息\"><a href=\"#收集错误信息\" class=\"headerlink\" title=\"收集错误信息\"></a>收集错误信息</h2><p>我们在前端收集错误，肯定离不开 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror\" target=\"_blank\" rel=\"noopener\">window.onerror</a> 这个 API，Sentry 之所以能够自动收集错误信息，主要也是基于这个 API 来做的。</p>\n<p>首先通过 <code>installGlobalHandler</code> 这个函数对原生的 <code>onerror</code> 进行了重写：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._global.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg: <span class=\"built_in\">any</span>, url: <span class=\"built_in\">any</span>, line: <span class=\"built_in\">any</span>, column: <span class=\"built_in\">any</span>, error: <span class=\"built_in\">any</span></span>): <span class=\"title\">boolean</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> currentHub = getCurrentHub();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> hasIntegration = currentHub.getIntegration(GlobalHandlers);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> isFailedOwnDelivery = error &amp;&amp; error.__sentry_own_request__ === <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (self._oldOnErrorHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> self._oldOnErrorHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> client = currentHub.getClient();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> event = isPrimitive(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? self._eventFromIncompleteOnError(msg, url, line, column)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : self._enhanceEventWithInitialFrame(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            eventFromUnknownInput(error, <span class=\"literal\">undefined</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">              attachStacktrace: client &amp;&amp; client.getOptions().attachStacktrace,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">              rejection: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">            url,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">            line,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">            column,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      addExceptionMechanism(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        handled: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">type</span>: <span class=\"string\">'onerror'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentHub.captureEvent(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        originalException: error,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (self._oldOnErrorHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> self._oldOnErrorHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;;</span></pre></td></tr></table></figure>\n\n<p>当然仅仅依赖于 <code>window.onerror</code> 还不够，比如说 <code>Promise</code> 里的 <code>reject</code>, 当没有 reject 处理器的时候，则会触发 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/unhandledrejection\" target=\"_blank\" rel=\"noopener\">unhandledrejection</a> 事件，因此需要用到这个 API，Sentry 也对其进行了重写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._global.onunhandledrejection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e: any</span>): <span class=\"title\">boolean</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> error = e;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        error = e &amp;&amp; <span class=\"string\">'reason'</span> <span class=\"keyword\">in</span> e ? e.reason : e;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (_oO) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// no-empty</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> currentHub = getCurrentHub();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> hasIntegration = currentHub.getIntegration(GlobalHandlers);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> isFailedOwnDelivery = error &amp;&amp; error.__sentry_own_request__ === <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (self._oldOnUnhandledRejectionHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> self._oldOnUnhandledRejectionHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> client = currentHub.getClient();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> event = isPrimitive(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? self._eventFromIncompleteRejection(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : eventFromUnknownInput(error, <span class=\"literal\">undefined</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">            attachStacktrace: client &amp;&amp; client.getOptions().attachStacktrace,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">            rejection: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      event.level = Severity.Error;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      addExceptionMechanism(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        handled: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        type: <span class=\"string\">'onunhandledrejection'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentHub.captureEvent(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        originalException: error,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (self._oldOnUnhandledRejectionHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> self._oldOnUnhandledRejectionHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;;</span></pre></td></tr></table></figure>\n\n<p><code>installGlobalHandler.ts</code> 还在事件的 exception 上添加 stacktrace 属性，来存放收集到的堆栈跟踪记录：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _enhanceEventWithInitialFrame(event: Event, url: <span class=\"built_in\">any</span>, line: <span class=\"built_in\">any</span>, column: <span class=\"built_in\">any</span>): Event &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception = event.exception || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values = event.exception.values || [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>] = event.exception.values[<span class=\"number\">0</span>] || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>].stacktrace = event.exception.values[<span class=\"number\">0</span>].stacktrace || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>].stacktrace.frames = event.exception.values[<span class=\"number\">0</span>].stacktrace.frames || [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> colno = <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(column, <span class=\"number\">10</span>)) ? <span class=\"literal\">undefined</span> : column;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> lineno = <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(line, <span class=\"number\">10</span>)) ? <span class=\"literal\">undefined</span> : line;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> filename = isString(url) &amp;&amp; url.length &gt; <span class=\"number\">0</span> ? url : getLocationHref();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (event.exception.values[<span class=\"number\">0</span>].stacktrace.frames.length === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    event.exception.values[<span class=\"number\">0</span>].stacktrace.frames.push(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      colno,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      filename,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>: '?',</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">      <span class=\"title\">in_app</span>: <span class=\"title\">true</span>,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">      <span class=\"title\">lineno</span>,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">    &#125;)</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> event;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"Breadcrumbs-的实现\"><a href=\"#Breadcrumbs-的实现\" class=\"headerlink\" title=\"Breadcrumbs 的实现\"></a>Breadcrumbs 的实现</h2><p>我们知道 Sentry 的面包屑功能，是用来收集 Issue 发生时的相关信息。通过 SDK 对某些事件的拦截，并时刻进行监听。只要在拦截范围内拦截到用户的操作，Sentry 都会为其生成一个面包屑记录，并通过实现的一个队列结构来存放这些记录；当错误发生时，这些信息会作为参数的一部分上传报告到 Sentry 后台。</p>\n<p>通过查看 <code>breadcrumbs.ts</code> 源码，发现它主要是对 <code>DOM</code>, <code>EventListener</code>, <code>fetch</code>, <code>console</code>, <code>history</code>, <code>xhr</code> 几处进行了拦截处理。所有拦截事件会通过 <a href=\"https://github.com/getsentry/sentry-javascript/blob/4905a844cef67fbd0347ee6e6f0da584f013a091/packages/browser/src/instrument.ts#L331\" target=\"_blank\" rel=\"noopener\">instrument</a>来进行添加，</p>\n<p>来看看 <code>Dom</code> 相关的具体实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * Creates breadcrumbs from DOM API calls</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _domBreadcrumb(handlerData: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;): <span class=\"built_in\">void</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> target;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* 访问 event.target，并通过 htmlTreeAsString 递归获取父节点，获取到类似 body &gt; div#app &gt; </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">    img[alt=\"Vue logo\"] 之类的路径</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">   */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    target = handlerData.event.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ? htmlTreeAsString(handlerData.event.target <span class=\"keyword\">as</span> Node)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      : htmlTreeAsString((handlerData.event <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> Node);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    target = <span class=\"string\">'&lt;unknown&gt;'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (target.length === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCurrentHub().addBreadcrumb(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      category: <span class=\"string\">`ui.<span class=\"subst\">$&#123;handlerData.name&#125;</span>`</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      message: target,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      event,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      name: handlerData.name,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>关于面包屑所有的拦截事件，都会根据构造函数的 options 来确定是否启用：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(<span class=\"params\">options?: BreadcrumbIntegrations</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>._options = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dom: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    history: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    sentry: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    xhr: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...options,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>这节我们主要对 Sentry 核心概念的基本原理进行分析，主要有几点：</p>\n<ul>\n<li>收集错误信息</li>\n<li>面包屑如何工作</li>\n</ul>","more":"<h2 id=\"收集错误信息\"><a href=\"#收集错误信息\" class=\"headerlink\" title=\"收集错误信息\"></a>收集错误信息</h2><p>我们在前端收集错误，肯定离不开 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror\" target=\"_blank\" rel=\"noopener\">window.onerror</a> 这个 API，Sentry 之所以能够自动收集错误信息，主要也是基于这个 API 来做的。</p>\n<p>首先通过 <code>installGlobalHandler</code> 这个函数对原生的 <code>onerror</code> 进行了重写：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._global.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg: <span class=\"built_in\">any</span>, url: <span class=\"built_in\">any</span>, line: <span class=\"built_in\">any</span>, column: <span class=\"built_in\">any</span>, error: <span class=\"built_in\">any</span></span>): <span class=\"title\">boolean</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> currentHub = getCurrentHub();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> hasIntegration = currentHub.getIntegration(GlobalHandlers);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> isFailedOwnDelivery = error &amp;&amp; error.__sentry_own_request__ === <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (self._oldOnErrorHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> self._oldOnErrorHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> client = currentHub.getClient();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> event = isPrimitive(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? self._eventFromIncompleteOnError(msg, url, line, column)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : self._enhanceEventWithInitialFrame(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">            eventFromUnknownInput(error, <span class=\"literal\">undefined</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">              attachStacktrace: client &amp;&amp; client.getOptions().attachStacktrace,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">              rejection: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">            url,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">            line,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">            column,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">          );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      addExceptionMechanism(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        handled: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">type</span>: <span class=\"string\">'onerror'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentHub.captureEvent(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        originalException: error,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (self._oldOnErrorHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> self._oldOnErrorHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;;</span></pre></td></tr></table></figure>\n\n<p>当然仅仅依赖于 <code>window.onerror</code> 还不够，比如说 <code>Promise</code> 里的 <code>reject</code>, 当没有 reject 处理器的时候，则会触发 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/unhandledrejection\" target=\"_blank\" rel=\"noopener\">unhandledrejection</a> 事件，因此需要用到这个 API，Sentry 也对其进行了重写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._global.onunhandledrejection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e: any</span>): <span class=\"title\">boolean</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> error = e;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        error = e &amp;&amp; <span class=\"string\">'reason'</span> <span class=\"keyword\">in</span> e ? e.reason : e;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (_oO) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// no-empty</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> currentHub = getCurrentHub();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> hasIntegration = currentHub.getIntegration(GlobalHandlers);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> isFailedOwnDelivery = error &amp;&amp; error.__sentry_own_request__ === <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (self._oldOnUnhandledRejectionHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> self._oldOnUnhandledRejectionHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> client = currentHub.getClient();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> event = isPrimitive(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ? self._eventFromIncompleteRejection(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        : eventFromUnknownInput(error, <span class=\"literal\">undefined</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">            attachStacktrace: client &amp;&amp; client.getOptions().attachStacktrace,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">            rejection: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      event.level = Severity.Error;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      addExceptionMechanism(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        handled: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        type: <span class=\"string\">'onunhandledrejection'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentHub.captureEvent(event, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        originalException: error,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (self._oldOnUnhandledRejectionHandler) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> self._oldOnUnhandledRejectionHandler.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;;</span></pre></td></tr></table></figure>\n\n<p><code>installGlobalHandler.ts</code> 还在事件的 exception 上添加 stacktrace 属性，来存放收集到的堆栈跟踪记录：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _enhanceEventWithInitialFrame(event: Event, url: <span class=\"built_in\">any</span>, line: <span class=\"built_in\">any</span>, column: <span class=\"built_in\">any</span>): Event &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception = event.exception || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values = event.exception.values || [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>] = event.exception.values[<span class=\"number\">0</span>] || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>].stacktrace = event.exception.values[<span class=\"number\">0</span>].stacktrace || &#123;&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  event.exception.values[<span class=\"number\">0</span>].stacktrace.frames = event.exception.values[<span class=\"number\">0</span>].stacktrace.frames || [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> colno = <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(column, <span class=\"number\">10</span>)) ? <span class=\"literal\">undefined</span> : column;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> lineno = <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(line, <span class=\"number\">10</span>)) ? <span class=\"literal\">undefined</span> : line;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> filename = isString(url) &amp;&amp; url.length &gt; <span class=\"number\">0</span> ? url : getLocationHref();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (event.exception.values[<span class=\"number\">0</span>].stacktrace.frames.length === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    event.exception.values[<span class=\"number\">0</span>].stacktrace.frames.push(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      colno,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      filename,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>: '?',</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">      <span class=\"title\">in_app</span>: <span class=\"title\">true</span>,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">      <span class=\"title\">lineno</span>,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">    &#125;)</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> event;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"Breadcrumbs-的实现\"><a href=\"#Breadcrumbs-的实现\" class=\"headerlink\" title=\"Breadcrumbs 的实现\"></a>Breadcrumbs 的实现</h2><p>我们知道 Sentry 的面包屑功能，是用来收集 Issue 发生时的相关信息。通过 SDK 对某些事件的拦截，并时刻进行监听。只要在拦截范围内拦截到用户的操作，Sentry 都会为其生成一个面包屑记录，并通过实现的一个队列结构来存放这些记录；当错误发生时，这些信息会作为参数的一部分上传报告到 Sentry 后台。</p>\n<p>通过查看 <code>breadcrumbs.ts</code> 源码，发现它主要是对 <code>DOM</code>, <code>EventListener</code>, <code>fetch</code>, <code>console</code>, <code>history</code>, <code>xhr</code> 几处进行了拦截处理。所有拦截事件会通过 <a href=\"https://github.com/getsentry/sentry-javascript/blob/4905a844cef67fbd0347ee6e6f0da584f013a091/packages/browser/src/instrument.ts#L331\" target=\"_blank\" rel=\"noopener\">instrument</a>来进行添加，</p>\n<p>来看看 <code>Dom</code> 相关的具体实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * Creates breadcrumbs from DOM API calls</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _domBreadcrumb(handlerData: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;): <span class=\"built_in\">void</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> target;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* 访问 event.target，并通过 htmlTreeAsString 递归获取父节点，获取到类似 body &gt; div#app &gt; </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">    img[alt=\"Vue logo\"] 之类的路径</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">   */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    target = handlerData.event.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ? htmlTreeAsString(handlerData.event.target <span class=\"keyword\">as</span> Node)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      : htmlTreeAsString((handlerData.event <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> Node);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    target = <span class=\"string\">'&lt;unknown&gt;'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (target.length === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCurrentHub().addBreadcrumb(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      category: <span class=\"string\">`ui.<span class=\"subst\">$&#123;handlerData.name&#125;</span>`</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      message: target,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      event,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      name: handlerData.name,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>关于面包屑所有的拦截事件，都会根据构造函数的 options 来确定是否启用：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(<span class=\"params\">options?: BreadcrumbIntegrations</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">this</span>._options = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    dom: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    history: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    sentry: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    xhr: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...options,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>"},{"title":"Sentry 入门攻略","date":"2019-12-02T16:52:05.000Z","_content":"\n## 基本概念\n\n[Sentry](https://github.com/getsentry/sentry) 是一个开源的实时错误监控的项目，支持多端的配置，包括 web 前端、服务器端、移动端及游戏端。\n\n支持各种主流语言，例如 python、oc、java、node、javascript 等，也可以应用到各种不同的框架上面，如前端框架中的 vue 、angular 、react 等最流行的前端框架，此外还提供了 GitHub、Slack、Trello 等常见开发工具的集成。\n\nSentry 使用 python 的 Django 编写后端服务；8.0 版本开始使用了 React.js 构建前端 UI。 \n\nSentry 采用的是 C/S 架构，客户端通过 SDK 的方式集成到应用程序中，并自动将错误发送到 Sentry 的服务端。一般情况下，我们只需要在项目里安装 SDK 且进行少量配置，十分方便。\n\n<!-- more -->\n\n官方提供的 SaaS 服务，有 **免费** 和 **收费** 两种模式：\n\n- 个人开发者（免费），支持所有语言，不支持团队协作，功能受限较多\n- 团队/企业（收费），$26/月起，收费主要以事件数量和一些高级功能为准\n\n除此之外，作为开源项目，Sentry 也支持私有化部署，官方提供了相关 [文档](https://docs.sentry.io/server/)\n\n## 竞品对比\n\n[Sentry](https://sentry.io/welcome)\n优势：支持语言全面，功能丰富，开源项目\n缺点：非国内社区，官方没有小程序的 SDK\n\n[FunDebug](https://www.fundebug.com)\n优势：支持各类小程序，[BUG场景重现](https://static.fundebug.cn/eleme_full.mp4)\n缺点：收费，定位偏前端\n\n[FrontJs](https://www.frontjs.com/feature/website)\n优点：提供性能监控，支持各类小程序\n缺点：收费，仅前端项目可用\n\n上述工具基本都支持常见的错误追踪、SourceMap 及用户记录等，Sentry 对于其他国内的同类型平台工具来说，主要优势是开源免费，且功能较为多，除了缺少中文社区支持外，像没有小程序的SDK这种，其实也能通过个人开发或社区贡献来解决，这里附上一个丁香园开源的 [小程序 - SDK](https://github.com/lizhiyao/sentry-miniapp)\n\n## 接入前端项目\n\n以 `Vue` 项目为例，首先我们需要使用官方提供的两个 SDK:\n\n- @sentry/browser\n- @sentry/integrations\n\n安装到项目里：\n\n```sh\n# Using yarn\n$ yarn add @sentry/browser\n$ yarn add @sentry/integrations\n\n# Using npm\n$ npm install @sentry/browser\n$ npm install @sentry/integrations\n```\n\n完成之后，找到项目的入口文件进行配置，例如`app.js`:\n\n```js\nimport Vue from \"vue\";\nimport * as Sentry from \"@sentry/browser\";\nimport * as Integrations from \"@sentry/integrations\";\n\nSentry.init({\n  dsn: \"https://<key>@sentry.io/<project>\",\n  integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n});\n```\n\n这样我们就完成了 SDK 最基本的配置，现在只要项目里出现任何未捕获的错误，SDK 都会帮你上传报告到 Sentry，针对其他一些特殊场景，需要我们手动发起错误报告的，可以用 Sentry 提供的API：\n\n- **captureException**：捕获异常，发送事件包含整个错误对象\n- **captureMessage**：捕获消息，发送一个只包含文本信息的事件\n\n如常见的 try catch 处理：\n\n```js\ntry {\n    aFunctionThatMightFail();\n} catch (err) {\n    Sentry.captureException(err);\n}\n```\n\n> * 如果你的项目并没有使用 `Vue`，只需要把上面的 `@sentry/integrations` 相关步骤移除即可，在这里它主要是通过 `Vue` 的 **config.errorHandler** 钩子函数，捕获 `Vue` 框架内引发错误的组件名称和 props 等。\n> * 查看完整的 Sentry SDK 配置 [案例](https://github.com/getsentry/sentry-javascript/blob/b8691d3994f55033f52f3e83b2c0c3933bc01696/packages/browser/examples/app.js#L34)\n\n## DSN（Data Source Name）\n\nDSN 作为应用的客户端密钥，用来确定 SDK 将事件发送到哪里。如果未提供此值，则 SDK 会尝试从SENTRY_DSN 环境变量中读取它。如果该变量也不存在，则 SDK 将不会发送任何事件。\n\nDSN 的组成：'{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'\n\n> * 同一个应用可以生成多个 DSN\n> * DSN 可以设置 **速率限制**，比如某个时间段能接受的最多事件量，来避免滥用及服务器攻击。\n\n## Environments\n\nSDK 通过配置 Environments，可以解决项目下同项目中不同环境的问题：\n\n```js\nSentry.init({\n  environment: 'staging',\n})\n```\n\n配置完成后，我们在管理后台可以看到对应的 Environments：\n\n![Environments](https://docs.sentry.io/assets/environment_filter-0c0681900ea6c1c30d8ef08382a6da17b38013780f19a03087885bf6fa0f9430.png)\n\n## Breadcrumbs\n\nSentry 通过 SDK 会自动记录某些用户操作，例如 url 的改变、Dom 事件的触发以及 XHR 请求等，这种称之为 **Breadcrumbs 面包屑**。它主要用来记录当事件发生时，用户操作的一系列行为，以便我们更好地重现场景：\n\n![Breadcrumbs](https://images.ctfassets.net/em6l9zw4tzag/4gBMFPOm4dQWm9OfrHLPqt/983c79b198222ac9d46e8d781202be92/breadcrumbs.png)\n\n我们还可以自定义面包屑事件，比如用 `addBreadcrumb` 来一个面包屑：\n\n```js\nwindow.addEventListener('resize', function(event){\n  Sentry.addBreadcrumb({\n    category: 'ui',\n    message: 'New window size:' + window.innerWidth + 'x' + window.innerHeight,\n    level: 'info'\n  });\n})\n```\n\n此外还提供了 `beforeBreadcrumb` 钩子函数，来进行面包屑添加前的最后交互。\n\n## Context & Scope\n\nSentry 提供 **Context**(上下文) 及 **Scope**(作用域)，当捕获事件时，SDK 会将事件数据与当前作用域中的信息进行合并，然后再发送到服务端。\n\n我们可以手动进行设置 Context，它包含以下几个部分：\n\n- **Structured Contexts**：特定的结构化上下文——包含操作系统信息，运行时的信息等，由 Sentry 自动设置。\n\n- **User**：设置当前的用户信息，向 Sentry 发送用户信息可以解锁更多功能，主要能力是收集受到问题影响的用户数量，以及更加了解 app 的整体质量。提供四个字段：`id`、`username `、`email `、`ip_address `，默认为 IP 地址，设置如下：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setUser({\"email\": \"john,doe@example.com\"});\n});\n```\n\n> 除此之外也可以提供任意的键值对，只要不是以上的保留字段，Sentry SDK 都会将它与用户信息储存起来。\n\n- **Tags**：以键值对的形式来设置，用户可以使用他们快速地访问相关的事件，绝大多数 SDK 通常支持在配置 scope 的时候配置 tag：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setTag(\"locale\", \"en\");\n});\n```\n\n只要 Sentry 开始发送打上了 tag 的数据，我们就可以在以下地方看到它：\n\n1.  侧边栏的过滤器\n2. 侧边栏的事件总结\n3. 聚合事件上的标签页\n\nSentry 会自动对一个事件的所有 tag 做索引，以及事件的发生概率和最后一次接受到的值，我们可以追踪不同标签的数量来分析各种问题的热点。\n\n- **Level**：设置事件严重等级：`fatal`, `error`, `warning`, `info`, `debug`；`error ` 是默认值，`fatal` 等级最高，`debug` 等级最低，通过 setLevel 来设置：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setLevel('warning');\n});\n```\n\n- **Fingerprint**：Sentry 通过指纹来对事件进行分组，对于某些场景，可以通过使用指纹来覆盖Sentry 默认的分组。\n\n- **Extra Context**：用来\b为事件添加额外数据，可以是任意的键值对，Sentry SDK 将会把它与事件一同储存起来，一般用于备注信息，不会影响索引，由于 Sentry 单个事件的大小限制，因此不宜添加大量数据：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setExtra(\"character_name\", \"Mighty Fighter\");\n});\n```\n\n关于 Scope 的用法\n\n**configureScope** 会创建全局的作用域，这意味着在 `configureScope` 里设置过后的上下文信息会一直保留，可以通过 `scope.clear()` 来进行清除；如果只是需要一次性的 scope，应该改用 `Sentry.withScope` 来完成\n\n**withScope** 用来创建临时的作用域，当每一个操作（请求，等等）结束时就会被清除：\n\n```js\nSentry.withScope(scope => {\n  scope.setExtra(\"character_name\", \"Mighty Fighter\");\n  Sentry.captureException(error);\n});\n```\n\n## Source Map & Release\n\nSentry 推荐将 Source Map 和 Sentry SDK 结合，这样可以更充分的利用监控与错误堆栈，同时Source Map 提供的错误堆栈提供了更多的关于错误的信息。\n\n线上产品代码一般是编译过的，因此 Source Map 的生成方式也有多种：\n\n- 转译器/Transpilers (Babel, Traceur)\n- 编译器/Compilers (Closure Compiler, TypeScript, CoffeeScript, Dart)\n- 压缩/Minifiers (UglifyJS)\n\n常见的场景在我们打包完成后，会生成对应的 sourcemap 文件, 一般情况下我们会将 js 脚本部署到服务器上，而将 sourcemap 文件上传到监控系统，在监控系统中展示 stack 信息时，利用 sourcemap 文件对 stack 信息进行解码，从而得到源码中的具体信息。  \n\n> 顺便附上 [Source Map 的原理探究](https://blog.fundebug.com/2018/10/12/understanding_frontend_source_map/)\n\n有了 Source Map，Sentry 还需要将它和 **Release 版本** 进行关联，通过和 sourcemap 进行对应，才能保证在查异常的时候可以正确利用 stack 信息，找到出问题所在版本的代码。\n\n> Release 的名字在组织（organization）中必须是唯一的，默认情况下是 git 的 Commit Id，但我们也可以手动指定它，如 `dev@1.0.0`\n\nRelease 一般在构建过程中执行，因此可以通过建立 CI 任务，在集成化部署中增加一个部署流程以实现。Sentry 中有两种配置方式:\n\n- 直接上传到 Sentry (`webpack-plugin`、`sentry cli`)\n- 将 SourceMap 文件托管到线上以进行访问\n\n官方提倡我们使用第一种方式，主要有以下几点考虑：\n\n- Sentry并不总是能够访问到你的服务器\n- 如果你在资源的url中未指定版本，也许会导致版本不匹配\n- 额外的请求延迟\n- 暴露的安全问题\n\n这里我们介绍通过 webpack-plugin 方式来上传 SourceMap，因为 webpack 相对于前端开发人员更熟悉:\n\n首先安装：\n\n```bash\n$ yarn add @sentry/webpack-plugin --dev\n```\n\n在 webpack 的配置文件里：\n\n```js\nconst SentryCliPlugin = require(\"@sentry/webpack-plugin\");\n\nconst config = {\n  plugins: [\n    new SentryCliPlugin({\n      include: \".\",  // 根目录，递归查找 sourcemap\n      ignoreFile: \".sentrycliignore\",\n      ignore: [\"node_modules\", \"webpack.config.js\"],\n      configFile: \"sentry.properties\"\n    })\n  ]\n};\n```\n\n在目录下新建一个 `.sentryclirc` 文件，设置 sentry-cli 的默认项：\n\n```txt\n[defaults]\nurl = <url>  # sentry 的请求地址\norg = <my-org> # 组织名\nproject = <my-project> # 应用名\n\n[auth]\ntoken = <my-token> # 注意这里是账号的token\n```\n\n完成后我们执行构建任务，应该可以看到对应的 SourceMap 已经上传，我们可以在 Sentry 管理后台进行确认：\n\n![Release](https://user-images.githubusercontent.com/10757519/69917803-0092c700-14a5-11ea-8ecb-16bbdd0d7e83.png)\n\n## 敏感数据\n\n我们知道，Sentry 默认是会发送所有事件的，那对于一些敏感数据的场景又该如何处理呢？比如说用户的账号个人信息、支付相关信息等，其实 Sentry 也提供了相关配置，总结如下：\n\n- SDK 支持 **blacklistUrls** 配置，通过设置字符串或正则表达式来匹配 URL 黑名单列表，命中则不上传：\n\n```js\nSentry.init({\n    blacklistUrls: [\"/home\"]\n})\n```\n\n- 通过 `beforeSend` 钩子函数来对事件进行拦截处理，如返回 `null` 则让事件作废，不上传：\n\n```js\nSentry.init({\n  beforeSend(event) {\n    // 此钩子函数可以进行发送前的最后处理\n    return null;\n  }\n})\n```\n\n- 通过 `beforeBreadcrumb` 钩子函数来对面包屑进行拦截处理，如返回 `null` 则过滤\n\n```js\nSentry.init(event) {\n  beforeBreadcrumb(breadcrumb, hint) {\n    if (breadcrumb.category === 'ui.click') {\n      const { target } = hint.event;\n      if (target.ariaLabel) {\n        breadcrumb.message = target.ariaLabel;\n      }\n    }\n    return breadcrumb;\n  },\n})\n```\n\n> 对于项目某些环境不需要配置 Sentry SDK 的，则可以通过环境变量来处理\n\n## Issue Owner \n\n默认情况下，如果没有开启 Issue Owner，Sentry 会将警报发送到与此项目关联的团队的所有成员，通过 Issue Owner，可以设置基于路径或 URL 将通知定向到特定的团队或用户，从而减少冗余的提醒通知。这会更快速地将问题推送给相应的开发人员，从而更快地解决这些问题。\n\n![Issue Owner](https://docs.sentry.io/assets/owners_panel-507c5848d618903826c83affa142278dd07296514ec8052041ab85c4ebf200d3.png)\n","source":"_posts/Sentry-入门攻略.md","raw":"---\ntitle: Sentry 入门攻略\ndate: 2019-12-03 00:52:05\ntags: sentry\n---\n\n## 基本概念\n\n[Sentry](https://github.com/getsentry/sentry) 是一个开源的实时错误监控的项目，支持多端的配置，包括 web 前端、服务器端、移动端及游戏端。\n\n支持各种主流语言，例如 python、oc、java、node、javascript 等，也可以应用到各种不同的框架上面，如前端框架中的 vue 、angular 、react 等最流行的前端框架，此外还提供了 GitHub、Slack、Trello 等常见开发工具的集成。\n\nSentry 使用 python 的 Django 编写后端服务；8.0 版本开始使用了 React.js 构建前端 UI。 \n\nSentry 采用的是 C/S 架构，客户端通过 SDK 的方式集成到应用程序中，并自动将错误发送到 Sentry 的服务端。一般情况下，我们只需要在项目里安装 SDK 且进行少量配置，十分方便。\n\n<!-- more -->\n\n官方提供的 SaaS 服务，有 **免费** 和 **收费** 两种模式：\n\n- 个人开发者（免费），支持所有语言，不支持团队协作，功能受限较多\n- 团队/企业（收费），$26/月起，收费主要以事件数量和一些高级功能为准\n\n除此之外，作为开源项目，Sentry 也支持私有化部署，官方提供了相关 [文档](https://docs.sentry.io/server/)\n\n## 竞品对比\n\n[Sentry](https://sentry.io/welcome)\n优势：支持语言全面，功能丰富，开源项目\n缺点：非国内社区，官方没有小程序的 SDK\n\n[FunDebug](https://www.fundebug.com)\n优势：支持各类小程序，[BUG场景重现](https://static.fundebug.cn/eleme_full.mp4)\n缺点：收费，定位偏前端\n\n[FrontJs](https://www.frontjs.com/feature/website)\n优点：提供性能监控，支持各类小程序\n缺点：收费，仅前端项目可用\n\n上述工具基本都支持常见的错误追踪、SourceMap 及用户记录等，Sentry 对于其他国内的同类型平台工具来说，主要优势是开源免费，且功能较为多，除了缺少中文社区支持外，像没有小程序的SDK这种，其实也能通过个人开发或社区贡献来解决，这里附上一个丁香园开源的 [小程序 - SDK](https://github.com/lizhiyao/sentry-miniapp)\n\n## 接入前端项目\n\n以 `Vue` 项目为例，首先我们需要使用官方提供的两个 SDK:\n\n- @sentry/browser\n- @sentry/integrations\n\n安装到项目里：\n\n```sh\n# Using yarn\n$ yarn add @sentry/browser\n$ yarn add @sentry/integrations\n\n# Using npm\n$ npm install @sentry/browser\n$ npm install @sentry/integrations\n```\n\n完成之后，找到项目的入口文件进行配置，例如`app.js`:\n\n```js\nimport Vue from \"vue\";\nimport * as Sentry from \"@sentry/browser\";\nimport * as Integrations from \"@sentry/integrations\";\n\nSentry.init({\n  dsn: \"https://<key>@sentry.io/<project>\",\n  integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n});\n```\n\n这样我们就完成了 SDK 最基本的配置，现在只要项目里出现任何未捕获的错误，SDK 都会帮你上传报告到 Sentry，针对其他一些特殊场景，需要我们手动发起错误报告的，可以用 Sentry 提供的API：\n\n- **captureException**：捕获异常，发送事件包含整个错误对象\n- **captureMessage**：捕获消息，发送一个只包含文本信息的事件\n\n如常见的 try catch 处理：\n\n```js\ntry {\n    aFunctionThatMightFail();\n} catch (err) {\n    Sentry.captureException(err);\n}\n```\n\n> * 如果你的项目并没有使用 `Vue`，只需要把上面的 `@sentry/integrations` 相关步骤移除即可，在这里它主要是通过 `Vue` 的 **config.errorHandler** 钩子函数，捕获 `Vue` 框架内引发错误的组件名称和 props 等。\n> * 查看完整的 Sentry SDK 配置 [案例](https://github.com/getsentry/sentry-javascript/blob/b8691d3994f55033f52f3e83b2c0c3933bc01696/packages/browser/examples/app.js#L34)\n\n## DSN（Data Source Name）\n\nDSN 作为应用的客户端密钥，用来确定 SDK 将事件发送到哪里。如果未提供此值，则 SDK 会尝试从SENTRY_DSN 环境变量中读取它。如果该变量也不存在，则 SDK 将不会发送任何事件。\n\nDSN 的组成：'{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'\n\n> * 同一个应用可以生成多个 DSN\n> * DSN 可以设置 **速率限制**，比如某个时间段能接受的最多事件量，来避免滥用及服务器攻击。\n\n## Environments\n\nSDK 通过配置 Environments，可以解决项目下同项目中不同环境的问题：\n\n```js\nSentry.init({\n  environment: 'staging',\n})\n```\n\n配置完成后，我们在管理后台可以看到对应的 Environments：\n\n![Environments](https://docs.sentry.io/assets/environment_filter-0c0681900ea6c1c30d8ef08382a6da17b38013780f19a03087885bf6fa0f9430.png)\n\n## Breadcrumbs\n\nSentry 通过 SDK 会自动记录某些用户操作，例如 url 的改变、Dom 事件的触发以及 XHR 请求等，这种称之为 **Breadcrumbs 面包屑**。它主要用来记录当事件发生时，用户操作的一系列行为，以便我们更好地重现场景：\n\n![Breadcrumbs](https://images.ctfassets.net/em6l9zw4tzag/4gBMFPOm4dQWm9OfrHLPqt/983c79b198222ac9d46e8d781202be92/breadcrumbs.png)\n\n我们还可以自定义面包屑事件，比如用 `addBreadcrumb` 来一个面包屑：\n\n```js\nwindow.addEventListener('resize', function(event){\n  Sentry.addBreadcrumb({\n    category: 'ui',\n    message: 'New window size:' + window.innerWidth + 'x' + window.innerHeight,\n    level: 'info'\n  });\n})\n```\n\n此外还提供了 `beforeBreadcrumb` 钩子函数，来进行面包屑添加前的最后交互。\n\n## Context & Scope\n\nSentry 提供 **Context**(上下文) 及 **Scope**(作用域)，当捕获事件时，SDK 会将事件数据与当前作用域中的信息进行合并，然后再发送到服务端。\n\n我们可以手动进行设置 Context，它包含以下几个部分：\n\n- **Structured Contexts**：特定的结构化上下文——包含操作系统信息，运行时的信息等，由 Sentry 自动设置。\n\n- **User**：设置当前的用户信息，向 Sentry 发送用户信息可以解锁更多功能，主要能力是收集受到问题影响的用户数量，以及更加了解 app 的整体质量。提供四个字段：`id`、`username `、`email `、`ip_address `，默认为 IP 地址，设置如下：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setUser({\"email\": \"john,doe@example.com\"});\n});\n```\n\n> 除此之外也可以提供任意的键值对，只要不是以上的保留字段，Sentry SDK 都会将它与用户信息储存起来。\n\n- **Tags**：以键值对的形式来设置，用户可以使用他们快速地访问相关的事件，绝大多数 SDK 通常支持在配置 scope 的时候配置 tag：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setTag(\"locale\", \"en\");\n});\n```\n\n只要 Sentry 开始发送打上了 tag 的数据，我们就可以在以下地方看到它：\n\n1.  侧边栏的过滤器\n2. 侧边栏的事件总结\n3. 聚合事件上的标签页\n\nSentry 会自动对一个事件的所有 tag 做索引，以及事件的发生概率和最后一次接受到的值，我们可以追踪不同标签的数量来分析各种问题的热点。\n\n- **Level**：设置事件严重等级：`fatal`, `error`, `warning`, `info`, `debug`；`error ` 是默认值，`fatal` 等级最高，`debug` 等级最低，通过 setLevel 来设置：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setLevel('warning');\n});\n```\n\n- **Fingerprint**：Sentry 通过指纹来对事件进行分组，对于某些场景，可以通过使用指纹来覆盖Sentry 默认的分组。\n\n- **Extra Context**：用来\b为事件添加额外数据，可以是任意的键值对，Sentry SDK 将会把它与事件一同储存起来，一般用于备注信息，不会影响索引，由于 Sentry 单个事件的大小限制，因此不宜添加大量数据：\n\n```js\nSentry.configureScope((scope) => {\n  scope.setExtra(\"character_name\", \"Mighty Fighter\");\n});\n```\n\n关于 Scope 的用法\n\n**configureScope** 会创建全局的作用域，这意味着在 `configureScope` 里设置过后的上下文信息会一直保留，可以通过 `scope.clear()` 来进行清除；如果只是需要一次性的 scope，应该改用 `Sentry.withScope` 来完成\n\n**withScope** 用来创建临时的作用域，当每一个操作（请求，等等）结束时就会被清除：\n\n```js\nSentry.withScope(scope => {\n  scope.setExtra(\"character_name\", \"Mighty Fighter\");\n  Sentry.captureException(error);\n});\n```\n\n## Source Map & Release\n\nSentry 推荐将 Source Map 和 Sentry SDK 结合，这样可以更充分的利用监控与错误堆栈，同时Source Map 提供的错误堆栈提供了更多的关于错误的信息。\n\n线上产品代码一般是编译过的，因此 Source Map 的生成方式也有多种：\n\n- 转译器/Transpilers (Babel, Traceur)\n- 编译器/Compilers (Closure Compiler, TypeScript, CoffeeScript, Dart)\n- 压缩/Minifiers (UglifyJS)\n\n常见的场景在我们打包完成后，会生成对应的 sourcemap 文件, 一般情况下我们会将 js 脚本部署到服务器上，而将 sourcemap 文件上传到监控系统，在监控系统中展示 stack 信息时，利用 sourcemap 文件对 stack 信息进行解码，从而得到源码中的具体信息。  \n\n> 顺便附上 [Source Map 的原理探究](https://blog.fundebug.com/2018/10/12/understanding_frontend_source_map/)\n\n有了 Source Map，Sentry 还需要将它和 **Release 版本** 进行关联，通过和 sourcemap 进行对应，才能保证在查异常的时候可以正确利用 stack 信息，找到出问题所在版本的代码。\n\n> Release 的名字在组织（organization）中必须是唯一的，默认情况下是 git 的 Commit Id，但我们也可以手动指定它，如 `dev@1.0.0`\n\nRelease 一般在构建过程中执行，因此可以通过建立 CI 任务，在集成化部署中增加一个部署流程以实现。Sentry 中有两种配置方式:\n\n- 直接上传到 Sentry (`webpack-plugin`、`sentry cli`)\n- 将 SourceMap 文件托管到线上以进行访问\n\n官方提倡我们使用第一种方式，主要有以下几点考虑：\n\n- Sentry并不总是能够访问到你的服务器\n- 如果你在资源的url中未指定版本，也许会导致版本不匹配\n- 额外的请求延迟\n- 暴露的安全问题\n\n这里我们介绍通过 webpack-plugin 方式来上传 SourceMap，因为 webpack 相对于前端开发人员更熟悉:\n\n首先安装：\n\n```bash\n$ yarn add @sentry/webpack-plugin --dev\n```\n\n在 webpack 的配置文件里：\n\n```js\nconst SentryCliPlugin = require(\"@sentry/webpack-plugin\");\n\nconst config = {\n  plugins: [\n    new SentryCliPlugin({\n      include: \".\",  // 根目录，递归查找 sourcemap\n      ignoreFile: \".sentrycliignore\",\n      ignore: [\"node_modules\", \"webpack.config.js\"],\n      configFile: \"sentry.properties\"\n    })\n  ]\n};\n```\n\n在目录下新建一个 `.sentryclirc` 文件，设置 sentry-cli 的默认项：\n\n```txt\n[defaults]\nurl = <url>  # sentry 的请求地址\norg = <my-org> # 组织名\nproject = <my-project> # 应用名\n\n[auth]\ntoken = <my-token> # 注意这里是账号的token\n```\n\n完成后我们执行构建任务，应该可以看到对应的 SourceMap 已经上传，我们可以在 Sentry 管理后台进行确认：\n\n![Release](https://user-images.githubusercontent.com/10757519/69917803-0092c700-14a5-11ea-8ecb-16bbdd0d7e83.png)\n\n## 敏感数据\n\n我们知道，Sentry 默认是会发送所有事件的，那对于一些敏感数据的场景又该如何处理呢？比如说用户的账号个人信息、支付相关信息等，其实 Sentry 也提供了相关配置，总结如下：\n\n- SDK 支持 **blacklistUrls** 配置，通过设置字符串或正则表达式来匹配 URL 黑名单列表，命中则不上传：\n\n```js\nSentry.init({\n    blacklistUrls: [\"/home\"]\n})\n```\n\n- 通过 `beforeSend` 钩子函数来对事件进行拦截处理，如返回 `null` 则让事件作废，不上传：\n\n```js\nSentry.init({\n  beforeSend(event) {\n    // 此钩子函数可以进行发送前的最后处理\n    return null;\n  }\n})\n```\n\n- 通过 `beforeBreadcrumb` 钩子函数来对面包屑进行拦截处理，如返回 `null` 则过滤\n\n```js\nSentry.init(event) {\n  beforeBreadcrumb(breadcrumb, hint) {\n    if (breadcrumb.category === 'ui.click') {\n      const { target } = hint.event;\n      if (target.ariaLabel) {\n        breadcrumb.message = target.ariaLabel;\n      }\n    }\n    return breadcrumb;\n  },\n})\n```\n\n> 对于项目某些环境不需要配置 Sentry SDK 的，则可以通过环境变量来处理\n\n## Issue Owner \n\n默认情况下，如果没有开启 Issue Owner，Sentry 会将警报发送到与此项目关联的团队的所有成员，通过 Issue Owner，可以设置基于路径或 URL 将通知定向到特定的团队或用户，从而减少冗余的提醒通知。这会更快速地将问题推送给相应的开发人员，从而更快地解决这些问题。\n\n![Issue Owner](https://docs.sentry.io/assets/owners_panel-507c5848d618903826c83affa142278dd07296514ec8052041ab85c4ebf200d3.png)\n","slug":"Sentry-入门攻略","published":1,"updated":"2019-12-02T17:06:47.667Z","_id":"ck3ooedrp0001awcb9np7553q","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><a href=\"https://github.com/getsentry/sentry\" target=\"_blank\" rel=\"noopener\">Sentry</a> 是一个开源的实时错误监控的项目，支持多端的配置，包括 web 前端、服务器端、移动端及游戏端。</p>\n<p>支持各种主流语言，例如 python、oc、java、node、javascript 等，也可以应用到各种不同的框架上面，如前端框架中的 vue 、angular 、react 等最流行的前端框架，此外还提供了 GitHub、Slack、Trello 等常见开发工具的集成。</p>\n<p>Sentry 使用 python 的 Django 编写后端服务；8.0 版本开始使用了 React.js 构建前端 UI。 </p>\n<p>Sentry 采用的是 C/S 架构，客户端通过 SDK 的方式集成到应用程序中，并自动将错误发送到 Sentry 的服务端。一般情况下，我们只需要在项目里安装 SDK 且进行少量配置，十分方便。</p>\n<a id=\"more\"></a>\n\n<p>官方提供的 SaaS 服务，有 <strong>免费</strong> 和 <strong>收费</strong> 两种模式：</p>\n<ul>\n<li>个人开发者（免费），支持所有语言，不支持团队协作，功能受限较多</li>\n<li>团队/企业（收费），$26/月起，收费主要以事件数量和一些高级功能为准</li>\n</ul>\n<p>除此之外，作为开源项目，Sentry 也支持私有化部署，官方提供了相关 <a href=\"https://docs.sentry.io/server/\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h2 id=\"竞品对比\"><a href=\"#竞品对比\" class=\"headerlink\" title=\"竞品对比\"></a>竞品对比</h2><p><a href=\"https://sentry.io/welcome\" target=\"_blank\" rel=\"noopener\">Sentry</a><br>优势：支持语言全面，功能丰富，开源项目<br>缺点：非国内社区，官方没有小程序的 SDK</p>\n<p><a href=\"https://www.fundebug.com\" target=\"_blank\" rel=\"noopener\">FunDebug</a><br>优势：支持各类小程序，<a href=\"https://static.fundebug.cn/eleme_full.mp4\" target=\"_blank\" rel=\"noopener\">BUG场景重现</a><br>缺点：收费，定位偏前端</p>\n<p><a href=\"https://www.frontjs.com/feature/website\" target=\"_blank\" rel=\"noopener\">FrontJs</a><br>优点：提供性能监控，支持各类小程序<br>缺点：收费，仅前端项目可用</p>\n<p>上述工具基本都支持常见的错误追踪、SourceMap 及用户记录等，Sentry 对于其他国内的同类型平台工具来说，主要优势是开源免费，且功能较为多，除了缺少中文社区支持外，像没有小程序的SDK这种，其实也能通过个人开发或社区贡献来解决，这里附上一个丁香园开源的 <a href=\"https://github.com/lizhiyao/sentry-miniapp\" target=\"_blank\" rel=\"noopener\">小程序 - SDK</a></p>\n<h2 id=\"接入前端项目\"><a href=\"#接入前端项目\" class=\"headerlink\" title=\"接入前端项目\"></a>接入前端项目</h2><p>以 <code>Vue</code> 项目为例，首先我们需要使用官方提供的两个 SDK:</p>\n<ul>\n<li>@sentry/browser</li>\n<li>@sentry/integrations</li>\n</ul>\n<p>安装到项目里：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Using yarn</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/browser</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/integrations</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Using npm</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install @sentry/browser</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install @sentry/integrations</span></pre></td></tr></table></figure>\n\n<p>完成之后，找到项目的入口文件进行配置，例如<code>app.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">\"@sentry/browser\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">\"@sentry/integrations\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  dsn: <span class=\"string\">\"https://&lt;key&gt;@sentry.io/&lt;project&gt;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>这样我们就完成了 SDK 最基本的配置，现在只要项目里出现任何未捕获的错误，SDK 都会帮你上传报告到 Sentry，针对其他一些特殊场景，需要我们手动发起错误报告的，可以用 Sentry 提供的API：</p>\n<ul>\n<li><strong>captureException</strong>：捕获异常，发送事件包含整个错误对象</li>\n<li><strong>captureMessage</strong>：捕获消息，发送一个只包含文本信息的事件</li>\n</ul>\n<p>如常见的 try catch 处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    aFunctionThatMightFail();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Sentry.captureException(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>如果你的项目并没有使用 <code>Vue</code>，只需要把上面的 <code>@sentry/integrations</code> 相关步骤移除即可，在这里它主要是通过 <code>Vue</code> 的 <strong>config.errorHandler</strong> 钩子函数，捕获 <code>Vue</code> 框架内引发错误的组件名称和 props 等。</li>\n<li>查看完整的 Sentry SDK 配置 <a href=\"https://github.com/getsentry/sentry-javascript/blob/b8691d3994f55033f52f3e83b2c0c3933bc01696/packages/browser/examples/app.js#L34\" target=\"_blank\" rel=\"noopener\">案例</a></li>\n</ul>\n</blockquote>\n<h2 id=\"DSN（Data-Source-Name）\"><a href=\"#DSN（Data-Source-Name）\" class=\"headerlink\" title=\"DSN（Data Source Name）\"></a>DSN（Data Source Name）</h2><p>DSN 作为应用的客户端密钥，用来确定 SDK 将事件发送到哪里。如果未提供此值，则 SDK 会尝试从SENTRY_DSN 环境变量中读取它。如果该变量也不存在，则 SDK 将不会发送任何事件。</p>\n<p>DSN 的组成：’{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}’</p>\n<blockquote>\n<ul>\n<li>同一个应用可以生成多个 DSN</li>\n<li>DSN 可以设置 <strong>速率限制</strong>，比如某个时间段能接受的最多事件量，来避免滥用及服务器攻击。</li>\n</ul>\n</blockquote>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>SDK 通过配置 Environments，可以解决项目下同项目中不同环境的问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  environment: <span class=\"string\">'staging'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>配置完成后，我们在管理后台可以看到对应的 Environments：</p>\n<p><img src=\"https://docs.sentry.io/assets/environment_filter-0c0681900ea6c1c30d8ef08382a6da17b38013780f19a03087885bf6fa0f9430.png\" alt=\"Environments\"></p>\n<h2 id=\"Breadcrumbs\"><a href=\"#Breadcrumbs\" class=\"headerlink\" title=\"Breadcrumbs\"></a>Breadcrumbs</h2><p>Sentry 通过 SDK 会自动记录某些用户操作，例如 url 的改变、Dom 事件的触发以及 XHR 请求等，这种称之为 <strong>Breadcrumbs 面包屑</strong>。它主要用来记录当事件发生时，用户操作的一系列行为，以便我们更好地重现场景：</p>\n<p><img src=\"https://images.ctfassets.net/em6l9zw4tzag/4gBMFPOm4dQWm9OfrHLPqt/983c79b198222ac9d46e8d781202be92/breadcrumbs.png\" alt=\"Breadcrumbs\"></p>\n<p>我们还可以自定义面包屑事件，比如用 <code>addBreadcrumb</code> 来一个面包屑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Sentry.addBreadcrumb(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    category: <span class=\"string\">'ui'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    message: <span class=\"string\">'New window size:'</span> + <span class=\"built_in\">window</span>.innerWidth + <span class=\"string\">'x'</span> + <span class=\"built_in\">window</span>.innerHeight,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    level: <span class=\"string\">'info'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>此外还提供了 <code>beforeBreadcrumb</code> 钩子函数，来进行面包屑添加前的最后交互。</p>\n<h2 id=\"Context-amp-Scope\"><a href=\"#Context-amp-Scope\" class=\"headerlink\" title=\"Context &amp; Scope\"></a>Context &amp; Scope</h2><p>Sentry 提供 <strong>Context</strong>(上下文) 及 <strong>Scope</strong>(作用域)，当捕获事件时，SDK 会将事件数据与当前作用域中的信息进行合并，然后再发送到服务端。</p>\n<p>我们可以手动进行设置 Context，它包含以下几个部分：</p>\n<ul>\n<li><p><strong>Structured Contexts</strong>：特定的结构化上下文——包含操作系统信息，运行时的信息等，由 Sentry 自动设置。</p>\n</li>\n<li><p><strong>User</strong>：设置当前的用户信息，向 Sentry 发送用户信息可以解锁更多功能，主要能力是收集受到问题影响的用户数量，以及更加了解 app 的整体质量。提供四个字段：<code>id</code>、<code>username</code>、<code>email</code>、<code>ip_address</code>，默认为 IP 地址，设置如下：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setUser(&#123;<span class=\"string\">\"email\"</span>: <span class=\"string\">\"john,doe@example.com\"</span>&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>除此之外也可以提供任意的键值对，只要不是以上的保留字段，Sentry SDK 都会将它与用户信息储存起来。</p>\n</blockquote>\n<ul>\n<li><strong>Tags</strong>：以键值对的形式来设置，用户可以使用他们快速地访问相关的事件，绝大多数 SDK 通常支持在配置 scope 的时候配置 tag：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setTag(<span class=\"string\">\"locale\"</span>, <span class=\"string\">\"en\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>只要 Sentry 开始发送打上了 tag 的数据，我们就可以在以下地方看到它：</p>\n<ol>\n<li>侧边栏的过滤器</li>\n<li>侧边栏的事件总结</li>\n<li>聚合事件上的标签页</li>\n</ol>\n<p>Sentry 会自动对一个事件的所有 tag 做索引，以及事件的发生概率和最后一次接受到的值，我们可以追踪不同标签的数量来分析各种问题的热点。</p>\n<ul>\n<li><strong>Level</strong>：设置事件严重等级：<code>fatal</code>, <code>error</code>, <code>warning</code>, <code>info</code>, <code>debug</code>；<code>error</code> 是默认值，<code>fatal</code> 等级最高，<code>debug</code> 等级最低，通过 setLevel 来设置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setLevel(<span class=\"string\">'warning'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>Fingerprint</strong>：Sentry 通过指纹来对事件进行分组，对于某些场景，可以通过使用指纹来覆盖Sentry 默认的分组。</p>\n</li>\n<li><p><strong>Extra Context</strong>：用来\b为事件添加额外数据，可以是任意的键值对，Sentry SDK 将会把它与事件一同储存起来，一般用于备注信息，不会影响索引，由于 Sentry 单个事件的大小限制，因此不宜添加大量数据：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setExtra(<span class=\"string\">\"character_name\"</span>, <span class=\"string\">\"Mighty Fighter\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>关于 Scope 的用法</p>\n<p><strong>configureScope</strong> 会创建全局的作用域，这意味着在 <code>configureScope</code> 里设置过后的上下文信息会一直保留，可以通过 <code>scope.clear()</code> 来进行清除；如果只是需要一次性的 scope，应该改用 <code>Sentry.withScope</code> 来完成</p>\n<p><strong>withScope</strong> 用来创建临时的作用域，当每一个操作（请求，等等）结束时就会被清除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.withScope(<span class=\"function\"><span class=\"params\">scope</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setExtra(<span class=\"string\">\"character_name\"</span>, <span class=\"string\">\"Mighty Fighter\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Sentry.captureException(error);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"Source-Map-amp-Release\"><a href=\"#Source-Map-amp-Release\" class=\"headerlink\" title=\"Source Map &amp; Release\"></a>Source Map &amp; Release</h2><p>Sentry 推荐将 Source Map 和 Sentry SDK 结合，这样可以更充分的利用监控与错误堆栈，同时Source Map 提供的错误堆栈提供了更多的关于错误的信息。</p>\n<p>线上产品代码一般是编译过的，因此 Source Map 的生成方式也有多种：</p>\n<ul>\n<li>转译器/Transpilers (Babel, Traceur)</li>\n<li>编译器/Compilers (Closure Compiler, TypeScript, CoffeeScript, Dart)</li>\n<li>压缩/Minifiers (UglifyJS)</li>\n</ul>\n<p>常见的场景在我们打包完成后，会生成对应的 sourcemap 文件, 一般情况下我们会将 js 脚本部署到服务器上，而将 sourcemap 文件上传到监控系统，在监控系统中展示 stack 信息时，利用 sourcemap 文件对 stack 信息进行解码，从而得到源码中的具体信息。  </p>\n<blockquote>\n<p>顺便附上 <a href=\"https://blog.fundebug.com/2018/10/12/understanding_frontend_source_map/\" target=\"_blank\" rel=\"noopener\">Source Map 的原理探究</a></p>\n</blockquote>\n<p>有了 Source Map，Sentry 还需要将它和 <strong>Release 版本</strong> 进行关联，通过和 sourcemap 进行对应，才能保证在查异常的时候可以正确利用 stack 信息，找到出问题所在版本的代码。</p>\n<blockquote>\n<p>Release 的名字在组织（organization）中必须是唯一的，默认情况下是 git 的 Commit Id，但我们也可以手动指定它，如 <code>dev@1.0.0</code></p>\n</blockquote>\n<p>Release 一般在构建过程中执行，因此可以通过建立 CI 任务，在集成化部署中增加一个部署流程以实现。Sentry 中有两种配置方式:</p>\n<ul>\n<li>直接上传到 Sentry (<code>webpack-plugin</code>、<code>sentry cli</code>)</li>\n<li>将 SourceMap 文件托管到线上以进行访问</li>\n</ul>\n<p>官方提倡我们使用第一种方式，主要有以下几点考虑：</p>\n<ul>\n<li>Sentry并不总是能够访问到你的服务器</li>\n<li>如果你在资源的url中未指定版本，也许会导致版本不匹配</li>\n<li>额外的请求延迟</li>\n<li>暴露的安全问题</li>\n</ul>\n<p>这里我们介绍通过 webpack-plugin 方式来上传 SourceMap，因为 webpack 相对于前端开发人员更熟悉:</p>\n<p>首先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/webpack-plugin --dev</span></pre></td></tr></table></figure>\n\n<p>在 webpack 的配置文件里：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SentryCliPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"@sentry/webpack-plugin\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> SentryCliPlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      include: <span class=\"string\">\".\"</span>,  <span class=\"comment\">// 根目录，递归查找 sourcemap</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ignoreFile: <span class=\"string\">\".sentrycliignore\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ignore: [<span class=\"string\">\"node_modules\"</span>, <span class=\"string\">\"webpack.config.js\"</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      configFile: <span class=\"string\">\"sentry.properties\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>在目录下新建一个 <code>.sentryclirc</code> 文件，设置 sentry-cli 的默认项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[defaults]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">url &#x3D; &lt;url&gt;  # sentry 的请求地址</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">org &#x3D; &lt;my-org&gt; # 组织名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">project &#x3D; &lt;my-project&gt; # 应用名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[auth]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">token &#x3D; &lt;my-token&gt; # 注意这里是账号的token</span></pre></td></tr></table></figure>\n\n<p>完成后我们执行构建任务，应该可以看到对应的 SourceMap 已经上传，我们可以在 Sentry 管理后台进行确认：</p>\n<p><img src=\"https://user-images.githubusercontent.com/10757519/69917803-0092c700-14a5-11ea-8ecb-16bbdd0d7e83.png\" alt=\"Release\"></p>\n<h2 id=\"敏感数据\"><a href=\"#敏感数据\" class=\"headerlink\" title=\"敏感数据\"></a>敏感数据</h2><p>我们知道，Sentry 默认是会发送所有事件的，那对于一些敏感数据的场景又该如何处理呢？比如说用户的账号个人信息、支付相关信息等，其实 Sentry 也提供了相关配置，总结如下：</p>\n<ul>\n<li>SDK 支持 <strong>blacklistUrls</strong> 配置，通过设置字符串或正则表达式来匹配 URL 黑名单列表，命中则不上传：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    blacklistUrls: [<span class=\"string\">\"/home\"</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 <code>beforeSend</code> 钩子函数来对事件进行拦截处理，如返回 <code>null</code> 则让事件作废，不上传：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  beforeSend(event) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 此钩子函数可以进行发送前的最后处理</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 <code>beforeBreadcrumb</code> 钩子函数来对面包屑进行拦截处理，如返回 <code>null</code> 则过滤</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(event) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  beforeBreadcrumb(breadcrumb, hint) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (breadcrumb.category === <span class=\"string\">'ui.click'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> &#123; target &#125; = hint.event;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (target.ariaLabel) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        breadcrumb.message = target.ariaLabel;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> breadcrumb;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于项目某些环境不需要配置 Sentry SDK 的，则可以通过环境变量来处理</p>\n</blockquote>\n<h2 id=\"Issue-Owner\"><a href=\"#Issue-Owner\" class=\"headerlink\" title=\"Issue Owner\"></a>Issue Owner</h2><p>默认情况下，如果没有开启 Issue Owner，Sentry 会将警报发送到与此项目关联的团队的所有成员，通过 Issue Owner，可以设置基于路径或 URL 将通知定向到特定的团队或用户，从而减少冗余的提醒通知。这会更快速地将问题推送给相应的开发人员，从而更快地解决这些问题。</p>\n<p><img src=\"https://docs.sentry.io/assets/owners_panel-507c5848d618903826c83affa142278dd07296514ec8052041ab85c4ebf200d3.png\" alt=\"Issue Owner\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><a href=\"https://github.com/getsentry/sentry\" target=\"_blank\" rel=\"noopener\">Sentry</a> 是一个开源的实时错误监控的项目，支持多端的配置，包括 web 前端、服务器端、移动端及游戏端。</p>\n<p>支持各种主流语言，例如 python、oc、java、node、javascript 等，也可以应用到各种不同的框架上面，如前端框架中的 vue 、angular 、react 等最流行的前端框架，此外还提供了 GitHub、Slack、Trello 等常见开发工具的集成。</p>\n<p>Sentry 使用 python 的 Django 编写后端服务；8.0 版本开始使用了 React.js 构建前端 UI。 </p>\n<p>Sentry 采用的是 C/S 架构，客户端通过 SDK 的方式集成到应用程序中，并自动将错误发送到 Sentry 的服务端。一般情况下，我们只需要在项目里安装 SDK 且进行少量配置，十分方便。</p>","more":"<p>官方提供的 SaaS 服务，有 <strong>免费</strong> 和 <strong>收费</strong> 两种模式：</p>\n<ul>\n<li>个人开发者（免费），支持所有语言，不支持团队协作，功能受限较多</li>\n<li>团队/企业（收费），$26/月起，收费主要以事件数量和一些高级功能为准</li>\n</ul>\n<p>除此之外，作为开源项目，Sentry 也支持私有化部署，官方提供了相关 <a href=\"https://docs.sentry.io/server/\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h2 id=\"竞品对比\"><a href=\"#竞品对比\" class=\"headerlink\" title=\"竞品对比\"></a>竞品对比</h2><p><a href=\"https://sentry.io/welcome\" target=\"_blank\" rel=\"noopener\">Sentry</a><br>优势：支持语言全面，功能丰富，开源项目<br>缺点：非国内社区，官方没有小程序的 SDK</p>\n<p><a href=\"https://www.fundebug.com\" target=\"_blank\" rel=\"noopener\">FunDebug</a><br>优势：支持各类小程序，<a href=\"https://static.fundebug.cn/eleme_full.mp4\" target=\"_blank\" rel=\"noopener\">BUG场景重现</a><br>缺点：收费，定位偏前端</p>\n<p><a href=\"https://www.frontjs.com/feature/website\" target=\"_blank\" rel=\"noopener\">FrontJs</a><br>优点：提供性能监控，支持各类小程序<br>缺点：收费，仅前端项目可用</p>\n<p>上述工具基本都支持常见的错误追踪、SourceMap 及用户记录等，Sentry 对于其他国内的同类型平台工具来说，主要优势是开源免费，且功能较为多，除了缺少中文社区支持外，像没有小程序的SDK这种，其实也能通过个人开发或社区贡献来解决，这里附上一个丁香园开源的 <a href=\"https://github.com/lizhiyao/sentry-miniapp\" target=\"_blank\" rel=\"noopener\">小程序 - SDK</a></p>\n<h2 id=\"接入前端项目\"><a href=\"#接入前端项目\" class=\"headerlink\" title=\"接入前端项目\"></a>接入前端项目</h2><p>以 <code>Vue</code> 项目为例，首先我们需要使用官方提供的两个 SDK:</p>\n<ul>\n<li>@sentry/browser</li>\n<li>@sentry/integrations</li>\n</ul>\n<p>安装到项目里：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Using yarn</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/browser</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/integrations</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Using npm</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install @sentry/browser</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install @sentry/integrations</span></pre></td></tr></table></figure>\n\n<p>完成之后，找到项目的入口文件进行配置，例如<code>app.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">\"@sentry/browser\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">\"@sentry/integrations\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  dsn: <span class=\"string\">\"https://&lt;key&gt;@sentry.io/&lt;project&gt;\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>这样我们就完成了 SDK 最基本的配置，现在只要项目里出现任何未捕获的错误，SDK 都会帮你上传报告到 Sentry，针对其他一些特殊场景，需要我们手动发起错误报告的，可以用 Sentry 提供的API：</p>\n<ul>\n<li><strong>captureException</strong>：捕获异常，发送事件包含整个错误对象</li>\n<li><strong>captureMessage</strong>：捕获消息，发送一个只包含文本信息的事件</li>\n</ul>\n<p>如常见的 try catch 处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    aFunctionThatMightFail();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Sentry.captureException(err);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>如果你的项目并没有使用 <code>Vue</code>，只需要把上面的 <code>@sentry/integrations</code> 相关步骤移除即可，在这里它主要是通过 <code>Vue</code> 的 <strong>config.errorHandler</strong> 钩子函数，捕获 <code>Vue</code> 框架内引发错误的组件名称和 props 等。</li>\n<li>查看完整的 Sentry SDK 配置 <a href=\"https://github.com/getsentry/sentry-javascript/blob/b8691d3994f55033f52f3e83b2c0c3933bc01696/packages/browser/examples/app.js#L34\" target=\"_blank\" rel=\"noopener\">案例</a></li>\n</ul>\n</blockquote>\n<h2 id=\"DSN（Data-Source-Name）\"><a href=\"#DSN（Data-Source-Name）\" class=\"headerlink\" title=\"DSN（Data Source Name）\"></a>DSN（Data Source Name）</h2><p>DSN 作为应用的客户端密钥，用来确定 SDK 将事件发送到哪里。如果未提供此值，则 SDK 会尝试从SENTRY_DSN 环境变量中读取它。如果该变量也不存在，则 SDK 将不会发送任何事件。</p>\n<p>DSN 的组成：’{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}’</p>\n<blockquote>\n<ul>\n<li>同一个应用可以生成多个 DSN</li>\n<li>DSN 可以设置 <strong>速率限制</strong>，比如某个时间段能接受的最多事件量，来避免滥用及服务器攻击。</li>\n</ul>\n</blockquote>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>SDK 通过配置 Environments，可以解决项目下同项目中不同环境的问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  environment: <span class=\"string\">'staging'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>配置完成后，我们在管理后台可以看到对应的 Environments：</p>\n<p><img src=\"https://docs.sentry.io/assets/environment_filter-0c0681900ea6c1c30d8ef08382a6da17b38013780f19a03087885bf6fa0f9430.png\" alt=\"Environments\"></p>\n<h2 id=\"Breadcrumbs\"><a href=\"#Breadcrumbs\" class=\"headerlink\" title=\"Breadcrumbs\"></a>Breadcrumbs</h2><p>Sentry 通过 SDK 会自动记录某些用户操作，例如 url 的改变、Dom 事件的触发以及 XHR 请求等，这种称之为 <strong>Breadcrumbs 面包屑</strong>。它主要用来记录当事件发生时，用户操作的一系列行为，以便我们更好地重现场景：</p>\n<p><img src=\"https://images.ctfassets.net/em6l9zw4tzag/4gBMFPOm4dQWm9OfrHLPqt/983c79b198222ac9d46e8d781202be92/breadcrumbs.png\" alt=\"Breadcrumbs\"></p>\n<p>我们还可以自定义面包屑事件，比如用 <code>addBreadcrumb</code> 来一个面包屑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Sentry.addBreadcrumb(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    category: <span class=\"string\">'ui'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    message: <span class=\"string\">'New window size:'</span> + <span class=\"built_in\">window</span>.innerWidth + <span class=\"string\">'x'</span> + <span class=\"built_in\">window</span>.innerHeight,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    level: <span class=\"string\">'info'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>此外还提供了 <code>beforeBreadcrumb</code> 钩子函数，来进行面包屑添加前的最后交互。</p>\n<h2 id=\"Context-amp-Scope\"><a href=\"#Context-amp-Scope\" class=\"headerlink\" title=\"Context &amp; Scope\"></a>Context &amp; Scope</h2><p>Sentry 提供 <strong>Context</strong>(上下文) 及 <strong>Scope</strong>(作用域)，当捕获事件时，SDK 会将事件数据与当前作用域中的信息进行合并，然后再发送到服务端。</p>\n<p>我们可以手动进行设置 Context，它包含以下几个部分：</p>\n<ul>\n<li><p><strong>Structured Contexts</strong>：特定的结构化上下文——包含操作系统信息，运行时的信息等，由 Sentry 自动设置。</p>\n</li>\n<li><p><strong>User</strong>：设置当前的用户信息，向 Sentry 发送用户信息可以解锁更多功能，主要能力是收集受到问题影响的用户数量，以及更加了解 app 的整体质量。提供四个字段：<code>id</code>、<code>username</code>、<code>email</code>、<code>ip_address</code>，默认为 IP 地址，设置如下：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setUser(&#123;<span class=\"string\">\"email\"</span>: <span class=\"string\">\"john,doe@example.com\"</span>&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>除此之外也可以提供任意的键值对，只要不是以上的保留字段，Sentry SDK 都会将它与用户信息储存起来。</p>\n</blockquote>\n<ul>\n<li><strong>Tags</strong>：以键值对的形式来设置，用户可以使用他们快速地访问相关的事件，绝大多数 SDK 通常支持在配置 scope 的时候配置 tag：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setTag(<span class=\"string\">\"locale\"</span>, <span class=\"string\">\"en\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>只要 Sentry 开始发送打上了 tag 的数据，我们就可以在以下地方看到它：</p>\n<ol>\n<li>侧边栏的过滤器</li>\n<li>侧边栏的事件总结</li>\n<li>聚合事件上的标签页</li>\n</ol>\n<p>Sentry 会自动对一个事件的所有 tag 做索引，以及事件的发生概率和最后一次接受到的值，我们可以追踪不同标签的数量来分析各种问题的热点。</p>\n<ul>\n<li><strong>Level</strong>：设置事件严重等级：<code>fatal</code>, <code>error</code>, <code>warning</code>, <code>info</code>, <code>debug</code>；<code>error</code> 是默认值，<code>fatal</code> 等级最高，<code>debug</code> 等级最低，通过 setLevel 来设置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setLevel(<span class=\"string\">'warning'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>Fingerprint</strong>：Sentry 通过指纹来对事件进行分组，对于某些场景，可以通过使用指纹来覆盖Sentry 默认的分组。</p>\n</li>\n<li><p><strong>Extra Context</strong>：用来\b为事件添加额外数据，可以是任意的键值对，Sentry SDK 将会把它与事件一同储存起来，一般用于备注信息，不会影响索引，由于 Sentry 单个事件的大小限制，因此不宜添加大量数据：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setExtra(<span class=\"string\">\"character_name\"</span>, <span class=\"string\">\"Mighty Fighter\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<p>关于 Scope 的用法</p>\n<p><strong>configureScope</strong> 会创建全局的作用域，这意味着在 <code>configureScope</code> 里设置过后的上下文信息会一直保留，可以通过 <code>scope.clear()</code> 来进行清除；如果只是需要一次性的 scope，应该改用 <code>Sentry.withScope</code> 来完成</p>\n<p><strong>withScope</strong> 用来创建临时的作用域，当每一个操作（请求，等等）结束时就会被清除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.withScope(<span class=\"function\"><span class=\"params\">scope</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  scope.setExtra(<span class=\"string\">\"character_name\"</span>, <span class=\"string\">\"Mighty Fighter\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Sentry.captureException(error);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"Source-Map-amp-Release\"><a href=\"#Source-Map-amp-Release\" class=\"headerlink\" title=\"Source Map &amp; Release\"></a>Source Map &amp; Release</h2><p>Sentry 推荐将 Source Map 和 Sentry SDK 结合，这样可以更充分的利用监控与错误堆栈，同时Source Map 提供的错误堆栈提供了更多的关于错误的信息。</p>\n<p>线上产品代码一般是编译过的，因此 Source Map 的生成方式也有多种：</p>\n<ul>\n<li>转译器/Transpilers (Babel, Traceur)</li>\n<li>编译器/Compilers (Closure Compiler, TypeScript, CoffeeScript, Dart)</li>\n<li>压缩/Minifiers (UglifyJS)</li>\n</ul>\n<p>常见的场景在我们打包完成后，会生成对应的 sourcemap 文件, 一般情况下我们会将 js 脚本部署到服务器上，而将 sourcemap 文件上传到监控系统，在监控系统中展示 stack 信息时，利用 sourcemap 文件对 stack 信息进行解码，从而得到源码中的具体信息。  </p>\n<blockquote>\n<p>顺便附上 <a href=\"https://blog.fundebug.com/2018/10/12/understanding_frontend_source_map/\" target=\"_blank\" rel=\"noopener\">Source Map 的原理探究</a></p>\n</blockquote>\n<p>有了 Source Map，Sentry 还需要将它和 <strong>Release 版本</strong> 进行关联，通过和 sourcemap 进行对应，才能保证在查异常的时候可以正确利用 stack 信息，找到出问题所在版本的代码。</p>\n<blockquote>\n<p>Release 的名字在组织（organization）中必须是唯一的，默认情况下是 git 的 Commit Id，但我们也可以手动指定它，如 <code>dev@1.0.0</code></p>\n</blockquote>\n<p>Release 一般在构建过程中执行，因此可以通过建立 CI 任务，在集成化部署中增加一个部署流程以实现。Sentry 中有两种配置方式:</p>\n<ul>\n<li>直接上传到 Sentry (<code>webpack-plugin</code>、<code>sentry cli</code>)</li>\n<li>将 SourceMap 文件托管到线上以进行访问</li>\n</ul>\n<p>官方提倡我们使用第一种方式，主要有以下几点考虑：</p>\n<ul>\n<li>Sentry并不总是能够访问到你的服务器</li>\n<li>如果你在资源的url中未指定版本，也许会导致版本不匹配</li>\n<li>额外的请求延迟</li>\n<li>暴露的安全问题</li>\n</ul>\n<p>这里我们介绍通过 webpack-plugin 方式来上传 SourceMap，因为 webpack 相对于前端开发人员更熟悉:</p>\n<p>首先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @sentry/webpack-plugin --dev</span></pre></td></tr></table></figure>\n\n<p>在 webpack 的配置文件里：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SentryCliPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"@sentry/webpack-plugin\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  plugins: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">new</span> SentryCliPlugin(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      include: <span class=\"string\">\".\"</span>,  <span class=\"comment\">// 根目录，递归查找 sourcemap</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ignoreFile: <span class=\"string\">\".sentrycliignore\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ignore: [<span class=\"string\">\"node_modules\"</span>, <span class=\"string\">\"webpack.config.js\"</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      configFile: <span class=\"string\">\"sentry.properties\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n\n<p>在目录下新建一个 <code>.sentryclirc</code> 文件，设置 sentry-cli 的默认项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[defaults]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">url &#x3D; &lt;url&gt;  # sentry 的请求地址</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">org &#x3D; &lt;my-org&gt; # 组织名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">project &#x3D; &lt;my-project&gt; # 应用名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[auth]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">token &#x3D; &lt;my-token&gt; # 注意这里是账号的token</span></pre></td></tr></table></figure>\n\n<p>完成后我们执行构建任务，应该可以看到对应的 SourceMap 已经上传，我们可以在 Sentry 管理后台进行确认：</p>\n<p><img src=\"https://user-images.githubusercontent.com/10757519/69917803-0092c700-14a5-11ea-8ecb-16bbdd0d7e83.png\" alt=\"Release\"></p>\n<h2 id=\"敏感数据\"><a href=\"#敏感数据\" class=\"headerlink\" title=\"敏感数据\"></a>敏感数据</h2><p>我们知道，Sentry 默认是会发送所有事件的，那对于一些敏感数据的场景又该如何处理呢？比如说用户的账号个人信息、支付相关信息等，其实 Sentry 也提供了相关配置，总结如下：</p>\n<ul>\n<li>SDK 支持 <strong>blacklistUrls</strong> 配置，通过设置字符串或正则表达式来匹配 URL 黑名单列表，命中则不上传：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    blacklistUrls: [<span class=\"string\">\"/home\"</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 <code>beforeSend</code> 钩子函数来对事件进行拦截处理，如返回 <code>null</code> 则让事件作废，不上传：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  beforeSend(event) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 此钩子函数可以进行发送前的最后处理</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 <code>beforeBreadcrumb</code> 钩子函数来对面包屑进行拦截处理，如返回 <code>null</code> 则过滤</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(event) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  beforeBreadcrumb(breadcrumb, hint) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (breadcrumb.category === <span class=\"string\">'ui.click'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> &#123; target &#125; = hint.event;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (target.ariaLabel) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        breadcrumb.message = target.ariaLabel;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> breadcrumb;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于项目某些环境不需要配置 Sentry SDK 的，则可以通过环境变量来处理</p>\n</blockquote>\n<h2 id=\"Issue-Owner\"><a href=\"#Issue-Owner\" class=\"headerlink\" title=\"Issue Owner\"></a>Issue Owner</h2><p>默认情况下，如果没有开启 Issue Owner，Sentry 会将警报发送到与此项目关联的团队的所有成员，通过 Issue Owner，可以设置基于路径或 URL 将通知定向到特定的团队或用户，从而减少冗余的提醒通知。这会更快速地将问题推送给相应的开发人员，从而更快地解决这些问题。</p>\n<p><img src=\"https://docs.sentry.io/assets/owners_panel-507c5848d618903826c83affa142278dd07296514ec8052041ab85c4ebf200d3.png\" alt=\"Issue Owner\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck3ooedrh0000awcb2aqd25vl","tag_id":"ck3ooedrr0002awcb8ujo3mtn","_id":"ck3ooedrx0004awcb6lpxch9l"},{"post_id":"ck3ooedrp0001awcb9np7553q","tag_id":"ck3ooedrr0002awcb8ujo3mtn","_id":"ck3ooedrx0005awcb696m14uc"}],"Tag":[{"name":"sentry","_id":"ck3ooedrr0002awcb8ujo3mtn"}]}}